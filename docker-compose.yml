services:
  kong:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: kong
    ports:
      - "${KONG_PROXY_PORT}:${KONG_PROXY_PORT}"
      - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_LISTEN: "${KONG_PROXY_HOST}:${KONG_PROXY_PORT}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_HOST}:${KONG_ADMIN_PORT}"
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
    volumes:
      - ./api-gateway/config/kong.yml:/etc/kong/kong.yml
      - ./.env:/app/.env
    networks:
      - services_network
    depends_on:
      - user-service
      - provider-service
      - bill-service

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DATABASE}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-multiple-databases.sql:/docker-entrypoint-initdb.d/init-multiple-databases.sql
    networks:
      - services_network

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - services_network
    volumes:
      - redis-data:/data

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
      args:
        - SERVER_PORT=${USER_SERVER_PORT}
    container_name: user
    restart: unless-stopped
    ports:
      - "${USER_SERVER_PORT}:${USER_SERVER_PORT}"
    environment:
      SERVER_PORT: "${USER_SERVER_PORT}"
      FRONTEND_URL: "${FRONTEND_URL}"
      ACCESS_TOKEN_KEY: "${ACCESS_TOKEN_KEY}"
      REFRESH_TOKEN_KEY: "${REFRESH_TOKEN_KEY}"
      ACCESS_TOKEN_EXPIRY: "${ACCESS_TOKEN_EXPIRY}"
      REFRESH_TOKEN_EXPIRY: "${REFRESH_TOKEN_EXPIRY}"
      SMTP_HOST: "${SMTP_HOST}"
      SMTP_PORT: "${SMTP_PORT}"
      SENDER_EMAIL: "${SENDER_EMAIL}"
      SENDER_PASSWORD: "${SENDER_PASSWORD}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_DATABASE: "user_db"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PROVIDER_BASE_URL: "${PROVIDER_BASE_URL}"
      BILL_BASE_URL: "${BILL_BASE_URL}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - ./.env:/app/.env
    command: ["go", "run", "./cmd/http/main.go"]
    depends_on:
      - postgres
      - redis
    networks:
      - services_network

  provider-service:
    build:
      context: ./services/provider-service
      dockerfile: Dockerfile
      args:
        - SERVER_PORT=${PROVIDER_SERVER_PORT}
    container_name: provider
    restart: unless-stopped
    ports:
      - "${PROVIDER_SERVER_PORT}:${PROVIDER_SERVER_PORT}"
    environment:
      SERVER_PORT: "${PROVIDER_SERVER_PORT}"
      ACCESS_TOKEN_KEY: "${ACCESS_TOKEN_KEY}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_DATABASE: "provider_db"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      USER_BASE_URL: "${USER_BASE_URL}"
      BILL_BASE_URL: "${BILL_BASE_URL}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - ./.env:/app/.env
    command: ["go", "run", "./cmd/http/main.go"]
    depends_on:
      - postgres
      - redis
    networks:
      - services_network

  bill-service:
    build:
      context: ./services/bill-service
      dockerfile: Dockerfile
      args:
        - SERVER_PORT=${BILL_SERVER_PORT}
    container_name: bill
    restart: unless-stopped
    ports:
      - "${BILL_SERVER_PORT}:${BILL_SERVER_PORT}"
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      POSTGRES_DATABASE: "bill_db"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      USER_BASE_URL: "${USER_BASE_URL}"
      PROVIDER_BASE_URL: "${PROVIDER_BASE_URL}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - ./.env:/app/.env
    command: ["go", "run", "./cmd/http/main.go"]
    depends_on:
      - postgres
      - redis
    networks:
      - services_network

  # Mock Services
  mock-electricity_provider:
    image: golang:1.21
    working_dir: /app
    container_name: mock-electricity
    command: ["go", "run", "/app/main.go"]
    volumes:
      - ./mock-api/mock-electricity-provider:/app
    ports:
      - "5001:5001"
    networks:
      - services_network

  mock-water_provider:
    image: golang:1.21
    working_dir: /app
    container_name: mock-water
    command: ["go", "run", "/app/main.go"]
    volumes:
      - ./mock-api/mock-water-provider:/app
    ports:
      - "5002:5002"
    networks:
      - services_network

  mock-internet_provider:
    image: golang:1.21
    working_dir: /app
    container_name: mock-internet
    command: ["go", "run", "/app/main.go"]
    volumes:
      - ./mock-api/mock-internet-provider:/app
    ports:
      - "5003:5003"
    networks:
      - services_network

networks:
  services_network:
    name: services_network
    driver: bridge

volumes:
  postgres-data:
  redis-data:
