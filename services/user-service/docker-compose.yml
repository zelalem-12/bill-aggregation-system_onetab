services:
  user-service:
    build:
      context: .
      dockerfile: dockerfile
      args:
        - SERVER_PORT=${SERVER_PORT}
    container_name: user-service
    restart: unless-stopped
    environment:
      - ENV=${ENV}
      - SERVER_PORT=${SERVER_PORT}
      - SERVER_HOST=${SERVER_HOST}
      - FRONTEND_URL=${FRONTEND_URL}

      # JWT Variables
      - ACCESS_TOKEN_KEY=${ACCESS_TOKEN_KEY}
      - REFRESH_TOKEN_KEY=${REFRESH_TOKEN_KEY}

      # Token Expiry
      - ACCESS_TOKEN_EXPIRY=${ACCESS_TOKEN_EXPIRY}
      - REFRESH_TOKEN_EXPIRY=${REFRESH_TOKEN_EXPIRY}

      # SMTP Variables
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - SENDER_PASSWORD=${SENDER_PASSWORD}

      # Database Variables
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    command: ["go", "run", "./cmd/http/main.go"]
    depends_on:
      - postgres
    networks:
      - services_network
      - user_db_network

  postgres:
    image: postgres:14-alpine
    container_name: user-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - user_db_network

networks:
  services_network:
    name: services_network
    driver: bridge
  user_db_network:
    name: user_db_network
    driver: bridge

volumes:
  user-db-data:
